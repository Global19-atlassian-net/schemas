{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "https://schemas.conda.io/repodata-record-1.schema.json",
  "type": "object",
  "title": "Conda Package Metadata Record Schema",
  "description": "The schema for each package file's block of metadata in repodata.",
  "$comment": "add these back to required: record_version ext fn subdir",
  "required": [
    "name",
    "version",
    "build_number",
    "build",
    "md5",
    "size",
    "sha256"
  ],
  "properties": {
    "record_version": {
      "type": "integer",
      "description": "The API version or schema version of the record. Conda versions through at least Conda 4.8 are able to understand record_version <= 1.",
      "const": 1
    },
    "origin_channel_name": {
      "type": "string",
      "description": "The origin channel of the package. Will probably be relevant for package signing.",
      "pattern": "^([a-z0-9]+(\\-|_|$))+$",
      "examples": [
        "main"
      ]
    },
    "subdir": {"$ref": "common-1.schema.json#/definitions/subdir"},
    "namespace": {"$ref": "common-1.schema.json#/definitions/namespace"},
    "name": {
      "type": "string",
      "pattern": "^[a-z0-9_](?!_)[._-]?([a-z0-9]+(\\.|\\-|_|$))*$",
      "description": "The package name. Conda restricts each environment to having a single package of any unique package name.",
      "examples": [
        "python",
        "numpy"
      ]
    },
    "version": {
      "type": "string",
      "description": "The package version. Must be a valid Conda Version string (validated against VersionOrder). Versions are set by the upstream code project and should be faithfully reproduced by the package author.",
      "pattern": "^([0-9]+!)?(([0-9a-z]+(\\.|_))*[0-9a-z]+)(\\+([0-9a-z]+(\\.|_))*[0-9a-z]+)?$",
      "examples": [
        "0.4.1",
        "0.960923",
        "1.1.a1",
        "1.1.0post1",
        "1.1.0post1+g123abcd",
        "1996.07.12",
        "2!0.4.1"
      ]
    },
    "build_number": {
      "type": "integer",
      "description": "The package build number. Build numbers are incremented by package builders when a material change is made to the package. Unlike other package managers, Conda makes all package builds available during a solve, and not just the latest build number.",
      "minimum": 0,
      "examples": [
        0,
        1
      ]
    },
    "build": {
      "type": "string",
      "description": "The package build string. The build string should include the build number in the last position of the build string. If the build string includes more than a build number, the build number should be delimited by an '_'.",
      "pattern": "^([a-z0-9_.]+_)?[0-9]+$",
      "examples": [
        "0",
        "py27hbee0394_1"
      ]
    },
    "ext": {
      "type": "string",
      "title": "The extension of the package file name. The .tar.bz2 extension is used by 'version 1' Conda packages and the '.conda' extension is used by 'version 2' Conda packages.",
      "enum": [
        ".tar.bz2",
        ".conda"
      ]
    },
    "fn": {
      "type": "string",
      "description": "The file name should be generated based on other fields in the package's metadata, i.e. {name}-{version}-{build}{ext}. It should be validated against those fields.",
      "examples": [
        "ansible-1.9.3-py27_0.tar.bz2",
        "basemap-1.2.0-py27hbee0394_0.conda"
      ]
    },
    "package_id": {
      "type": "string",
      "description": "Except for the channel_name, the unique identifier of a package. The package_id should be generated based on other fields in the package's metadata: '{namespace}:{name}-{version}-{build_number}-{build}'",
      "examples": [
        "py:ansible-1.9.3-0-py27_0"
      ]
    },
    "md5": {
      "type": "string",
      "description": "The md5 hash of the package file.",
      "pattern": "^[0-9a-f]{32}$",
      "examples": [
        "9ceda9e08e97868b6ff7c0961a40544f"
      ]
    },
    "size": {
      "type": "integer",
      "description": "The size of the package file in bytes.",
      "minimum": 0,
      "examples": [
        15874157
      ]
    },
    "sha256": {
      "type": "string",
      "description": "The sha256 hash of the package file.",
      "pattern": "^[0-9a-f]{64}$",
      "examples": [
        "2efb3826d65af3f3857a35f04a0ba5c6288b9b3e4e47c9e2118fbdcc190406b9"
      ]
    },
    "timestamp": {
      "type": "integer",
      "description": "The Unix time (Epoch time) when the package was created. If a legacy 'date' field is provided and timestamp is not, it should be used to populate the timestamp field.",
      "examples": [
        1539182577753
      ]
    },
    "patch_version": {
      "type": "integer",
      "minimum": 0,
      "description": "Metadata record patch version. Incremented for each change of the metadata record."
    },
    "depends": {
      "type": "array",
      "description": "The package's dependencies. A list of MatchSpecs required when installing the package.",
      "items": {
        "$id": "#/properties/depends/items",
        "type": "string",
        "description": "Valid Conda MatchSpec.",
        "examples": [
          "geos >=3.6.2,<3.6.3.0a0",
          "matplotlib >=1.0.0",
          "numpy >=1.11.3,<2.0a0",
          "pyproj >=1.9.3",
          "pyshp >=1.2.0",
          "python >=2.7,<2.8.0a0",
          "six",
          "vc 9.*"
        ]
      }
    },
    "constrains": {
      "type": "array",
      "description": "The package's constraints on other packages in the environment. If the package is to be installed into an environment, the other packages in the environment must conform to these constratins. A constraint can be thought of as a 'reverse dependency'.",
      "items": {
        "type": "string",
        "description": "Valid Conda MatchSpec.",
        "examples": [
          "proj4 <6",
          "proj <6"
        ]
      }
    },
    "features": {
      "deprecated": true,
      "type": "string",
      "description": "The features provided by the package. Format is a space-delimited string of items.",
      "pattern": "^([a-z0-9-_.]+( |$))*$"
    },
    "track_features": {
      "type": "array",
      "description": "The features 'tracked' by the package. Format is a space-delimited string of items. https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#track-features",
      "pattern": "^([a-z0-9-_.]+( |$))*$"
    },
    "noarch": {
      "deprecated": true,
      "type": "string",
      "description": "The noarch type of a package (if applicable).",
      "enum": [
        "generic",
        "python"
      ]
    },
    "namespace_in_name": {
      "type": "boolean",
      "description": "Indicates if the package's namespace is in the package name. For example, the value is 'true' for the package 'python-socketio' but 'false' for the package 'python-graphviz'.",
      "default": false
    },
    "license": {
      "type": [ "string", "null" ],
      "title": "The package's license.",
      "description": "A free-form text field describing the packages license.",
      "default": "",
      "examples": [
        "MIT"
      ]
    },
    "license_family": {"$ref": "common-1.schema.json#/definitions/license_family"},
    "spdx_license": {
      "type": "string",
      "description": "The SPDX license description of the package. https://spdx.org/licenses/",
      "$comment": "https://github.com/sindresorhus/spdx-license-list/blob/master/spdx-simple.json",
      "examples": [
        "BSD-3-Clause",
        "MIT OR Apache-2.0"
      ]
    },
    "spdx_version": {
      "type": "string",
      "description": "SPDX specification version. Note that this is the specification version that describes the schema for spdx_license, not the SPDX license list version (https://github.com/sindresorhus/spdx-license-list/blob/master/spdx.json).",
      "examples": [
        "2.1"
      ]
    },
    "vulns_active": {
      "type": "array",
      "description": "Vulnerabilities that have been identified for the package that are potentially active and exploitable.",
      "items": {"$ref": "common-1.schema.json#/definitions/vuln_id"}
    },
    "vulns_mitigated": {
      "type": "array",
      "description": "Vulnerabilities that have been identified for the package but have proactively been mitigated in this package build through a code patch.",
      "items": {"$ref": "common-1.schema.json#/definitions/vuln_id"}
    },
    "vulns_cleared": {
      "type": "array",
      "description": "Vulnerabilities associated with the package that have been analyzed and determined to not be applicable.",
      "items": {"$ref": "common-1.schema.json#/definitions/vuln_id"}
    }
  }
}
